@inject HeaderViewModel ViewModel
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">SisCras</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
        <div class="fixed-bottom nav-item px-3">
            @if (!@ViewModel.IsTecnicoLoggedIn)
            {
                <button @onclick="GoToLogin">Fazer login</button>
            }
            else
            {
                <div class="d-flex flex-column" id="dados_tecnico">
                    <span>@ViewModel.Tecnico?.Nome</span>
                    <span>@ViewModel.Tecnico?.CrasInfo?.Nome</span>
                    <button @onclick="@ViewModel.LogoutTecnicoCommand.Execute">Logout</button>
                </div>
            }
        </div>
    </nav>

</div>

@code {
    protected override void OnInitialized()
    {
        // "Escuta" as mudanças no ViewModel para atualizar a UI
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    private void GoToLogin()
    {
       ViewModel.GoToLogin();
    }

    private async void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // Força a re-renderização do componente
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }
}
